"""Memory storage module for managing conversation history.

This module provides an in-memory storage solution for maintaining user
conversation history with the AI coach, supporting history retrieval and
automatic pruning of old interactions.
"""

from datetime import datetime
from typing import List, Dict, Any, DefaultDict
from collections import defaultdict


class MemoryStore:
    """In-memory storage for conversation history by user.
    
    This class maintains conversation histories for multiple users using a 
    dictionary structure. Each user's history is automatically pruned to 
    maintain only the most recent interactions, preventing unbounded memory growth.
    
    Attributes:
        conversations (DefaultDict[str, List[Dict[str, str]]]): Dictionary mapping
            user IDs to their conversation history lists.
        max_history (int): Maximum number of interactions to retain per user.
            Defaults to 50.
    
    Note:
        This is an in-memory store and will lose all data on application restart.
        For production use, consider implementing persistent storage (e.g., Redis, 
        database).
    
    Example:
        >>> store = MemoryStore()
        >>> store.add_interaction(
        ...     user_id="user123",
        ...     user_message="Good morning!",
        ...     coach_response="Good morning! How are you feeling today?"
        ... )
        >>> history = store.get_history("user123")
    """
    
    def __init__(self) -> None:
        """Initialize the memory store with empty conversation histories.
        
        Creates a defaultdict that automatically initializes empty lists for
        new user IDs when they are first accessed.
        """
        # Use defaultdict to automatically create empty lists for new users
        self.conversations: DefaultDict[str, List[Dict[str, str]]] = defaultdict(list)
        
        # Maximum number of interactions to keep per user
        # This prevents memory from growing unbounded in long conversations
        self.max_history: int = 50
    
    def add_interaction(
        self, 
        user_id: str, 
        user_message: str, 
        coach_response: str
    ) -> None:
        """Store a conversation interaction with timestamp.
        
        Adds a new interaction to the user's conversation history and automatically
        prunes old interactions if the history exceeds max_history.
        
        Args:
            user_id (str): Unique identifier for the user.
            user_message (str): The message sent by the user.
            coach_response (str): The response generated by the coach.
        
        Note:
            Timestamps are stored in ISO 8601 format (UTC timezone).
            If the user's history exceeds max_history, only the most recent
            max_history interactions are retained.
        
        Example:
            >>> store.add_interaction(
            ...     user_id="user123",
            ...     user_message="I'm feeling unmotivated",
            ...     coach_response="Let's work on that together!"
            ... )
        """
        # Create interaction record with UTC timestamp
        interaction: Dict[str, str] = {
            'timestamp': datetime.utcnow().isoformat(),
            'user_message': user_message,
            'coach_response': coach_response
        }
        
        # Append to user's conversation history
        self.conversations[user_id].append(interaction)
        
        # Automatically trim history if it exceeds maximum length
        # This keeps only the most recent interactions to prevent memory bloat
        if len(self.conversations[user_id]) > self.max_history:
            # Slice to keep only the last max_history items
            self.conversations[user_id] = self.conversations[user_id][-self.max_history:]
    
    def get_history(self, user_id: str) -> List[Dict[str, str]]:
        """Retrieve conversation history for a specific user.
        
        Args:
            user_id (str): Unique identifier for the user.
        
        Returns:
            List[Dict[str, str]]: List of interaction dictionaries, each containing
                'timestamp', 'user_message', and 'coach_response' keys. Returns an
                empty list if the user has no history.
        
        Example:
            >>> history = store.get_history("user123")
            >>> for interaction in history:
            ...     print(interaction['timestamp'], interaction['user_message'])
        """
        # Return user's history or empty list if user not found
        return self.conversations.get(user_id, [])
    
    def clear_history(self, user_id: str) -> None:
        """Clear all conversation history for a specific user.
        
        Removes the user's entire conversation history from memory. This is useful
        for implementing user privacy features or allowing users to start fresh.
        
        Args:
            user_id (str): Unique identifier for the user whose history should be cleared.
        
        Note:
            This operation is permanent and cannot be undone. The user ID entry
            is completely removed from the conversations dictionary.
        
        Example:
            >>> store.clear_history("user123")
            >>> assert store.get_history("user123") == []
        """
        # Only delete if the user exists in the dictionary
        if user_id in self.conversations:
            del self.conversations[user_id]
